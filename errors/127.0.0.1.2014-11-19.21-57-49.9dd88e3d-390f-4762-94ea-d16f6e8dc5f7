(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Table'"
p3
sS'layer'
p4
S'E:\\web2py\\applications\\shoebox\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\ndef index():\n    """ Main Page | Displays newest submitted articles """\n    return dict(message=T(\'Hello World\'))\n    \ndef articles():\n    """ Search all submitted articles """\n    form = SQLFORM.factory(Field(\'keyword\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        query = db.articles.title.contains(form.vars.keyword)\n        rows = db(query).select(orderby=~db.articles.articleDate)\n    elif form.errors:\n        response.flash = "Incomplete Search!"\n        rows = \'\'\n    else:\n        rows = \'\'\n    return dict(form=form, rows=rows)\n\ndef article_CLICK():\n    """ Loads individual page for each article submitted to ShoeBox"""\n    article_id = request.args(0, cast=int)\n    article = db.articles(article_id) or redirect(URL(\'articles\'))\n    return dict(article = article)\n    \ndef authors():\n    """ Search all authors """\n    form = SQLFORM.factory(Field(\'keyword\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        query = db.auth_user.first_name.contains(form.vars.keyword)\n        query = query | db.auth_user.last_name.contains(form.vars.keyword)\n        rows = db(query).select(orderby=db.auth_user.last_name)\n    elif form.errors:\n        response.flash = "Incomplete Search!"\n        rows = \'\'\n    else:\n        rows = \'\'\n    return dict(form=form, rows=rows)\n\ndef authors_CLICK():\n    """Loads individual page for each ShoeBox author"""\n    author_id = request.args(0, cast=int)\n    author = db.auth_user(author_id) or redirect(URL(\'articles\'))\n\n#    query = db(db.auth_user).select(join = db.articles.on(db.auth_user.id == db.articles.articleOwner))\n    query = db(db.auth_user).select(join = db.articles.on(db.auth_user.id == db.articles.with_alias(author_id)))\n    \n    return dict(author = author, query = query)\n\n#@auth.requires_login() \ndef dashboard():\n    """ Dashboard to allow users to upload new or edit existing articles\n        and to see all existing user articles """\n    return dict(message=T(\'Hello World\'))\n    \n########## Extras ##########\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(authors_CLICK)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 224, in restricted\n  File "E:\\web2py\\applications\\shoebox\\controllers/default.py", line 107, in <module>\n  File "gluon/globals.py", line 392, in <lambda>\n  File "E:\\web2py\\applications\\shoebox\\controllers/default.py", line 46, in authors_CLICK\n    query = db(db.auth_user).select(join = db.articles.on(db.auth_user.id == db.articles.with_alias(author_id)))\n  File "gluon/dal.py", line 10749, in select\n  File "gluon/dal.py", line 2472, in select\n  File "gluon/dal.py", line 1868, in select\n  File "gluon/dal.py", line 1780, in _select\n  File "gluon/dal.py", line 9744, in __str__\n  File "gluon/dal.py", line 1544, in expand\n  File "gluon/dal.py", line 1514, in ON\n  File "gluon/dal.py", line 1544, in expand\n  File "gluon/dal.py", line 1440, in EQ\n  File "gluon/dal.py", line 1555, in expand\n  File "gluon/dal.py", line 2005, in represent\nTypeError: long() argument must be a string or a number, not \'Table\'\n'
p11
s.